import time
from tkinter import *
import requests
import bs4

from GoogleNews import GoogleNews
import datetime
from datetime import date
import webbrowser

import tkinter as tk
from time import sleep
import tkinter.font as tkFont
from tkinter import messagebox
import tkinter.font as tkf
from tkinter import filedialog
from PIL import *
from PIL import Image,ImageTk
import numpy as np
import random
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.metrics import confusion_matrix


from os import system as sys
import os, time
import xml.etree.ElementTree as ET
import numpy as np
import csv

top=tk.Tk()
c=tk.Canvas(bg="black",height=10000,width=12000)
global filename
global cnt,prediction1,prediction2,prediction3,last_path,button16,apklocation,apknm,count,detectoption,button11,button13
count=0
global filename    
def dession(prediction):
    global m5
    if prediction > 0.5:
        messagebox.showinfo("showinfo", "MALWARE DETECTED")
        m5=Label(c,bg="black",text=" MALWARE",fg='white')
        m5.place(x=520,y=430)
                   
    else:
        messagebox.showinfo("showinfo", "MALWARE NOT DETECTED")
        m5=Label(c,bg="black",text=" GOODWARE or not Malware",fg='white')
        m5.place(x=520,y=430)
                   

def other_img(x1,y1,png_name):
    global label10
    load=Image.open(png_name)
    
    img=ImageTk.PhotoImage(load)
    label10=Label(c,image=img)
    label10.image=img
    label10.place(x=x1,y=y1)
    

c.pack()
fontStyle = tkFont.Font(family="Lucida Grande", size=20)
title=Label(c,bg="black",text="Malware Detector",font=fontStyle,fg='white')
title.place(x=480,y=8)
fontStyle.configure(size=30)


#other_img(0,0,"C:\\Users\\omkar\\Desktop\\project\\malware_test\\backgroun22.jpg")
other_img(0,50,"C:\\Users\\OMKAR\\Downloads\\Web Downloads\\android malware detector\\android malware detector\\bg.jpg")

def label(text2,x1,y1):
   global labl2
   labl2=Label(c,text="hi omkar")
   labl2.place(x=x1,y=y1)
   labl2.configure(text=text2)
def label2(text3,x2,y2):
   global labl3
   labl3=Label(c,text="hi omkar")
   labl3.place(x=x2,y=y2)
   labl3.configure(text=text3)
def label3(text3,x3,y3):
   global labl4 
   labl4=Label(c,text="hi omkar")
   labl4.place(x=x3,y=y3)
   labl4.configure(text=text3)
   
def clear():
   global labl2,labl3,labl4,m4,m5,button16
   m.place_forget()
   m2.place_forget()
   m3.place_forget()
   m5.place_forget()
   m4.place_forget()
   labl2.place_forget()
   labl3.place_forget()
   labl4.place_forget()
      
def RandomForestRegressor2():
    global m,m2,m3,cnt,m4,m5
    if (cnt==1):

            
         clear()   

   
    
    extract_data = pd.read_csv('data.csv',low_memory=False)
    extract_data=extract_data.dropna(how="all")
    extract_data = extract_data.iloc[:, 1:330].values
    dataset = pd.read_csv('trainmal.csv',low_memory=False)
    
    dataset.head()
    X = dataset.iloc[:, 0:329].values
    y = dataset.iloc[:, 330].values
   # X=dataset[["transact","onServiceConnected","bindService","attachInterface","ServiceConnection","android.os.Binder","SEND_SMS","Ljava.lang.Class.getCanonicalName","Ljava.lang.Class.getMethods","Ljava.lang.Class.cast","Ljava.net.URLDecoder","android.content.pm.Signature","android.telephony.SmsManager","READ_PHONE_STATE","getBinder","ClassLoader","Landroid.content.Context.registerReceiver","Ljava.lang.Class.getField","Landroid.content.Context.unregisterReceiver","GET_ACCOUNTS","RECEIVE_SMS","Ljava.lang.Class.getDeclaredField","READ_SMS","getCallingUid","Ljavax.crypto.spec.SecretKeySpec","android.intent.action.BOOT_COMPLETED","USE_CREDENTIALS","MANAGE_ACCOUNTS","android.content.pm.PackageInfo","KeySpec","DexClassLoader","HttpGet.init","SecretKey","Ljava.lang.Class.getMethod","System.loadLibrary","android.intent.action.SEND","Ljavax.crypto.Cipher","WRITE_SMS","READ_SYNC_SETTINGS","AUTHENTICATE_ACCOUNTS","android.telephony.gsm.SmsManager","WRITE_HISTORY_BOOKMARKS","TelephonyManager.getSubscriberId","mount","INSTALL_PACKAGES","Runtime.getRuntime","CAMERA","Ljava.lang.Object.getClass","WRITE_SYNC_SETTINGS","READ_HISTORY_BOOKMARKS","Ljava.lang.Class.forName","INTERNET","android.intent.action.PACKAGE_REPLACED","Binder","android.intent.action.SEND_MULTIPLE","RECORD_AUDIO","IBinder","android.os.IBinder","createSubprocess","NFC","ACCESS_LOCATION_EXTRA_COMMANDS","URLClassLoader","WRITE_APN_SETTINGS","abortBroadcast","BIND_REMOTEVIEWS","android.intent.action.TIME_SET","READ_PROFILE","TelephonyManager.getDeviceId","MODIFY_AUDIO_SETTINGS","getCallingPid","READ_SYNC_STATS","BROADCAST_STICKY","android.intent.action.PACKAGE_REMOVED","android.intent.action.TIMEZONE_CHANGED","WAKE_LOCK","RECEIVE_BOOT_COMPLETED","RESTART_PACKAGES","Ljava.lang.Class.getPackage","chmod","Ljava.lang.Class.getDeclaredClasses","android.intent.action.ACTION_POWER_DISCONNECTED","android.intent.action.PACKAGE_ADDED","PathClassLoader","TelephonyManager.getSimSerialNumber","Runtime.load","TelephonyManager.getCallState","BLUETOOTH","READ_CALENDAR","READ_CALL_LOG","SUBSCRIBED_FEEDS_WRITE","READ_EXTERNAL_STORAGE","sendMultipartTextMessage","PackageInstaller"]]
    #y=dataset["cla11"]
    from sklearn.ensemble import RandomForestRegressor
    

    from sklearn.model_selection import train_test_split

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.9, random_state=0)
    from sklearn.preprocessing import StandardScaler
    x_train=X_train
    x_test=X_test
    sc = StandardScaler()

    X_train = sc.fit_transform(X_train)
    X_test = sc.transform(X_test)
    regressor = RandomForestRegressor(n_estimators=20, random_state=0)
    regressor.fit(X_train, y_train)
    y_pred = regressor.predict(X_test)

    extract_data = sc.transform(extract_data)
    prediction = regressor.predict(extract_data)
    from sklearn import metrics
   


    from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
    m=tk.Label(c,text= "confusion matrix",foreground="steelblue")
    m2=tk.Label(c,text= "accuracy of models ",foreground="steelblue")
    m3=tk.Label(c,text= "classification report:  ",foreground="steelblue")
    m3.place(x=400,y=580)
    m.place(x=400,y=480)
    m2.place(x=400,y=520)
    m4=tk.Label(c,text= "detection result:  ",foreground="steelblue")
    m4.place(x=400,y=430)

    #m5=tk.Label(c,text= str(prediction),foreground="steelblue")
   # m5.place(x=520,y=250)

    print("prediction")
    print(prediction)
    prediction1=prediction
  #  print("confusion matrix")

    label(confusion_matrix(y_test,y_pred.round()),520,480)
    print()
    print()
   # print("classification report")
  #  print(classification_report(y_test,y_pred.round()))

    #print("accuracy ",accuracy_score(y_test, y_pred.round()))
    accuracy=accuracy_score(y_test, y_pred.round())
    label2(str(classification_report(y_test,y_pred.round())),520,550)
    label3(accuracy,520,520)
    for i in prediction:
        
        dession(i)
    
    cnt=1
   

def LogisticRegression():
    global m,m2,m3,cnt,m4,m5
    if (cnt==1):

            
        clear()
    
    from sklearn.linear_model import LogisticRegression
    from sklearn.metrics import classification_report, confusion_matrix,accuracy_score
    from sklearn.model_selection import train_test_split
    from sklearn.preprocessing import StandardScaler
    

    extract_data = pd.read_csv('data.csv',low_memory=False)
    extract_data=extract_data.dropna(how="all")
    extract_data = extract_data.iloc[:, 1:330].values
    dataset = pd.read_csv('trainmal.csv',low_memory=False)
    
    dataset.head(100)
    x = dataset.iloc[:, 0:329].values
    y = dataset.iloc[:, 330].values
    

    x_train, x_test, y_train, y_test =\
        train_test_split(x, y, test_size=0.6, random_state=0)
    scaler = StandardScaler()
    x_train = scaler.fit_transform(x_train)
    model = LogisticRegression(solver='liblinear', C=0.8, multi_class='ovr',
                               random_state=0)
    model.fit(x_train, y_train)
    LogisticRegression(C=0.8, class_weight=None, dual=False, fit_intercept=True,
                       intercept_scaling=1, l1_ratio=None, max_iter=100,
                       multi_class='ovr', n_jobs=None, penalty='12', random_state=0,
                       solver='liblinear', tol=0.0001, verbose=0, warm_start=False)
    x_test = scaler.transform(x_test)
    y_pred = model.predict(x_test)

    x_test2 = scaler.transform(extract_data)
    prediction2 = model.predict(x_test2)
    
    print(prediction2)
    #print(model.score(x_train, y_train))

 #   confusion_matrix(y_test, y_pred)
    cm = confusion_matrix(y_test, y_pred)
    print()
    #print("confusion matrix")
    m=tk.Label(c,text= "confusion matrix",foreground="steelblue")
    m2=tk.Label(c,text= "accuracy of models ",foreground="steelblue")
    m3=tk.Label(c,text= "classification report:  ",foreground="steelblue")
    m3.place(x=400,y=580)
    m.place(x=400,y=480)
    m2.place(x=400,y=520)
    m4=tk.Label(c,text= "detection result:  ",foreground="steelblue")
    m4.place(x=400,y=430)

    label(cm,520,480)
   
    #print("accuracy")
    label2(accuracy_score(y_test, y_pred.round()),520,520)
    #print("classification report")
    label3(classification_report(y_test, y_pred),520,550)
    for i in prediction2:
        dession(i)
    cnt=1


    
def exit1():
     top.destroy()
def uploadfile():
     global filename,last_path,button16,apklocation,apknm,button12,show
     
    
     filename2 = filedialog.askopenfilename(initialdir ="C:/Users/raju prasad/Desktop/finnal project",
                                              title = "Select a File",
                                              filetypes = (("APK file",
                                                            "*.apk*"),
                                                           ("all files",
                                                               "*.*")))
     def show():
         global apklocation,apknm
         
         fontS = tkFont.Font(family="Lucida Grande", size=14)
         apklocation=tk.Label(c,text="LOCATION>>"+ filename2,foreground="blue",font=fontS)
         apklocation.place(x=300,y=250)
         apknm=tk.Label(c,text="APK NAME>>"+ last_path,foreground="blue",font=fontS)
         apknm.place(x=300,y=290)
     

     last_path=os.path.basename(filename2)
     if "apk" in last_path:
         
         filename=os.path.split(os.path.split(filename2)[0])[1]
         messagebox.showinfo("showinfo", ".apk file uploaded")
         show=tk.Button(c,text='Show .apk Name',command=show,height=2,width=20)
         show.place(x=500,y=350)
         
         button12=tk.Button(c,text='Decompile .apk',command=Main,height=2,width=20)
         button12.place(x=680,y=350)

         button16.place_forget()
         print(last_path)
     else:
          messagebox.showinfo("showinfo", ".this is not apk file")
          exit1()

#other_img(0,0,"C:\\Users\\OMKAR\\Desktop\\project\\malware_test\\backgroun22.jpg")
#st_name=tk.Label(c,text= "enter student name",foreground="steelblue")


##############################////////////////////////////////////////////////yyyyyyyyyyyyyyyyyyyyyyyyyyyyyytttttttttttt

         
#button2=tk.Button(c,text='ALL STUDENT DETAIL',command=all_student_detail,height=2,width=100)
#button2.place(x=100,y=200)    
cnt=2




from os import system as sys
import os, time
import xml.etree.ElementTree as ET
import numpy as np
import csv
def PermListUpdater():
    updateList = []
    defaultList = []
    with open('./PermList/UpdatePermList.txt') as updateFile:
        updatedata = updateFile.read()
        updateList = updatedata.split('\n')
    updateList.pop()
    with open('./PermList/DefaultPermList.txt') as defaultFile:
        defaultdata = defaultFile.read()
        defaultList = defaultdata.split('\n')
    defaultList.pop()

    newList=defaultList+list(set(updateList) - set(defaultList))

    with open('./PermList/UpdatedPermList.txt', 'w') as dumpFile:
        for i in newList:
            dumpFile.write(i+'\n')

def CSVFormatter():
    test_file=open("./PermList/UpdatedPermList.txt")
    data=test_file.read()
    test_file.close()

    permlist=data.split('\n')
    permlist.pop()

    csv_row_data=['NAME']  #ADD NAME COLUMN
    csv_row_data += permlist
    csv_row_data.append('CLASS') # ADD PERMISSION COLUMN 

    with open('data.csv','w') as csv_file:
        writer=csv.writer(csv_file)
        writer.writerow(csv_row_data)
       
def Extract():
    global filename,last_path,permList
    DIRTYPE=["./"+filename]
    permCollection = set()


    for datastoredir in DIRTYPE:
        datastor=[]
        if datastoredir == "./"+filename:          # FILTER APK TYPE TO AID IN LABEL GENERATION
            apktype="MALWARE"
        else:
           apktype="BENIGN"
        Flag=1
        TimeStamp = str(time.time())
        Jdax = "./Modules/jadx/bin/jadx"            # JADX MODULE PATH
        TargetApkPath = datastoredir
        ApkNameList =last_path
        #ApkNameList = os.listdir(ApkNameList)
        print(ApkNameList)
        if len(ApkNameList) == int(0):
            Flag=0
            

        if Flag != int(0):
            #ApkNameList.sort()
            TargetApkPath = datastoredir+"/"
            CurrentApk = 0
           

            ApkName=last_path
            TargetApk = TargetApkPath + ApkName
            print("eeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr")
            print(TargetApk)
            print("haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaajjjjjjjjjjjj")

            print("("+str(apktype)+")"+ " [" + str(CurrentApk + 1) + ' / ' + str(len(ApkNameList)) + "] --- "+ApkName,end="")
           
            os.system("java -jar apktool.jar " +" d -o ./UnpackedApk/" +ApkName + "omkar" +" " + TargetApk)

            UnpackedDir = "./UnpackedApk/" + ApkName + "omkar"
            MainfestPath = UnpackedDir +"/AndroidManifest.xml"
           
           
            root2 = ET.parse(MainfestPath)
            root=root2.getroot()
            permissions = root.findall("uses-permission")

            print("  SET STATUS :", end=' ')        # ADD NEW PERMISSION TO THE LIST
            for perm in permissions:
                for att in perm.attrib:
                    permelement = perm.attrib[att]

                    if permelement in permCollection:
                        
                        print("0", end=' ')
                    
                    else:
                        print("1", end=' ')
                        permCollection.add(permelement)
       


    permList = list(permCollection)
    print(permList)


    with open("./PermList/UpdatePermList.txt", 'w') as file:        # SAVE LIST IN FILE.
        for i in permList:
            file.write(i + '\n')


#FUNCTION TO CREATE DATASET FROM EXISTING .csv FILE AND SUPPLIED APK FILES FOLDER.
def Bagger(datastoredir):
    global filename,last_path
#    if datastoredir == "./"+filename:
    TYPE=1                        # TYPE SET TO DIFFERENTIATE MALWARE AND BENIGN IN DATASET WITH LABELS
    print("\n\t ** Extracting From Malware Samples ** \n\n")
  #  elif datastoredir =="./BenignAPK":
#        TYPE=0
    print("\n\t ** Extracting From Benign Samples ** \n\n")
    #TimeStamp = str(time.time())
    TimeStamp="omkar"
    Flag=1

    Jdax = "./Modules/jadx/bin/jadx"
    TargetApkPath = datastoredir+"/"
    #ApkNameList = os.listdir(datastoredir)
    ApkNameList = last_path
    if len(ApkNameList) == int(0):
        Flag=0

    if Flag != int(0):
        #ApkNameList.sort()
        #TotalApks = len(ApkNameList)
        CurrentApk = 0
        fieldnames=[]
        with open('data.csv') as csv_file:
            CSVREADER=csv.DictReader(csv_file)
            fieldnames=CSVREADER.fieldnames     #GET THE FIELD NAMES

        csv_master_dict=dict.fromkeys(fieldnames,0)


        ApkName=ApkNameList
        TargetApk = TargetApkPath + ApkName

        #print(">[" + str(CurrentApk + 1) + ' / ' + str(TotalApks) + "] --- "+ApkName ,end=' ')
       # print("\t.",end=' ')
        #sys(Jdax + " -d ./UnpackedApk/" + ApkName + TimeStamp + " " + TargetApk + " >/dev/null")        #EXTRACT THE PERMISSIONS FROM THE APK FILES
       # os.system("java -jar apktool.jar " +" d -o ./UnpackedApk/" +ApkName + TimeStamp +" " + TargetApk)
       # print(".",end=' ')

        UnpackedDir = "./UnpackedApk/" + ApkName + TimeStamp
        MainfestPath = UnpackedDir + "/AndroidManifest.xml"

        try:
            root = ET.parse(MainfestPath).getroot()         # FORMAT DATA ROW 
            permissions = root.findall("uses-permission")
            csv_master_dict=dict.fromkeys(fieldnames,0)
            csv_master_dict['NAME']=ApkName
            csv_master_dict['CLASS']=TYPE
            for perm in permissions:
                for att in perm.attrib:
                    permelement = perm.attrib[att]
                    csv_master_dict[permelement]=1
            sys("rm -f -R " + UnpackedDir)
            print(".", end=' ')
            with open('data.csv', 'a') as csv_dump:
                CSVwriter = csv.DictWriter(csv_dump, fieldnames=fieldnames)
                CSVwriter.writerow(csv_master_dict)         # SAVE DATA TO DATASET ROW BY ROW FOR EACH APPLICATION
            print(".")
        except Exception:
            messagebox.showinfo("showinfo", ".ERROR in  Extrcting feature")
            print("EERRRROORR")
            pass
        CurrentApk += 1




# MAIN DRIVER FUNCTION 
def Main():
    global filename,last_path,apklocation,show,button12,button13,button11,detectoption
    print(filename)
    sys("rm './PermList/UpdatePermList.txt' './PermList/UpdatePermList2.txt' './PermList/UpdatedPermList.txt'")  # TO CLEAN THE STRUCTURE BEFORE STARTING
    sys("rm -rf ./UnpackedApk/*")
    
    Malware_Directory_Name="./"+filename
#    Benign_Directory_Name="./BenignAPK"
    sys("clear")
    print("\tANDROID PERMISSION BASED DATASET CREATOR FOR ML MODELS")
    print("Extracting Permissions\t[*---]")
    Extract()
    print("\n\nCreating Base Permission List\t[**--]")
    PermListUpdater()
    print("\n\nCreating Base Dataset\t[***-]")
    CSVFormatter()
    print("\n\nCreating Main Dataset\t[****]")
   # Bagger(Benign_Directory_Name)
    Bagger(Malware_Directory_Name)
    print("\n## Cleaning Temp. Files")
    sys("rm -rf ./UnpackedApk/*")
    sys("rm './PermList/UpdatePermList.txt' './PermList/UpdatedPermList.txt'")
    print("\n\n ***************DONE*****************  \nSaved as data.csv")
    messagebox.showinfo("showinfo", ".CSV FILE CREATED")
    apklocation.place_forget()
    apknm.place_forget()
    button12.place_forget()
    show.place_forget()
   # showapkdata=tk.Button(c,text='SHOW Permission',command=showdata,height=2,width=20)
   # showapkdata.place(x=500,y=350)
    fontStyle = tkFont.Font(family="Lucida Grande", size=15)
    detectoption=Label(c,bg="blue",text="select any one method  for detection ",font=fontStyle,fg='white')
    detectoption.place(x=500,y=250)
 

    button11=tk.Button(c,text='RandomForestRegressor',command=RandomForestRegressor2,height=2,width=20)
    button11.place(x=680,y=300)
    button13=tk.Button(c,text='LogisticRegression',command=LogisticRegression,height=2,width=20)
    button13.place(x=500,y=300)
    button15=tk.Button(c,text='HOME',command=home,height=2,width=10)
    button15.place(x=1230,y=500)

       

#if __name__ == '__main__':
 #   Main()

def home():
    global button13,button11,detectoption,count,button16
    if count==1:
        button11.place_forget()
        button13.place_forget()
        detectoption.place_forget()
        clear()
    
    
    button16=tk.Button(c,text='UPLOAD .Apk',command=uploadfile,height=2,width=30,fg='black')
    button16.place(x=700,y=320)

    count=1

button14=tk.Button(c,text=' CLEAR ',command=clear,height=2,width=10,fg='green')
button14.place(x=1230,y=550)
button15=tk.Button(c,text='EXIT',command=exit1,height=2,width=10,fg='red')
button15.place(x=1230,y=600)

def news():
    googlenews = GoogleNews()
    googlenews = GoogleNews(lang='en')
    googlenews = GoogleNews(period='7d')
    googlenews = GoogleNews(start=datetime.timedelta(days=1),end=date.today())
    googlenews = GoogleNews(encode='utf-8')
    

    googlenews.get_news("hacking")
    link=googlenews.get_links()
    result=googlenews.get_texts()
     
    fontStyle = tkFont.Font(family="Lucida Grande", size=20)
    news=Label(c,bg="white",text="News 1:"+result[0],font=fontStyle,fg='black')
    news.place(x=0,y=53)
    news2=Label(c,bg="white",text="News 2:"+result[1],font=fontStyle,fg='black')
    news2.place(x=0,y=85)
    fontStyle.configure(size=15)
    def view():
        webbrowser.open(link[0])
        
    viewnews=tk.Button(c,text="View News",command=view,height=2,width=15,bg='white',fg='black')
    viewnews.place(x=0,y=120)

    

news()
home()
top.mainloop()
